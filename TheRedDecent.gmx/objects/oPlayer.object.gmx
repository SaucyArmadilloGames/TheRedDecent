<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize vars
jumpspeed = 9;
movespeed = 8;
hsp = 0;
vsp = 0;
depth = 10;
image_speed = .25;
global.Armed = false
key_down = 0;
kick = false
Timerr = 0
bhsp = 1
armed = false
Health = 25
//old stuff ^^

//tweakables
MoveSpeed = 4
JumpSpeed = 9
Accel = 1
TermVel = 15

//init
Jump = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(oLightingController) {
    
    size = 700
    Size = size
    draw_set_blend_mode(bm_subtract)
    surface_set_target(global.light)
    draw_ellipse_color(x-Size/2-view_xview,y-Size/2-view_yview,x+Size/2-view_xview,y+Size/2-view_yview,c_white,c_black,false)
    
    surface_reset_target()
    draw_set_blend_mode(bm_normal)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
walking = keyboard_check(ord('D')) || keyboard_check(ord('A'));
airborne = !(vsp == 0); 

if (armed) {
    
    if hsp != 0 {
        sprite_index = sPlayerWalking
    } else {
        sprite_index = sPlayerIdle 
    }
    
} else {

    if hsp != 0 {
        sprite_index = sPlayerWalking 
    } else {
        sprite_index = sPlayerIdle 
    }
 
}


if hsp != 0 { image_xscale = sign(hsp) image_speed = .25 } else { image_index = 0 image_speed = 0 }    

//if (airborne) image_index = sPlayerAirborn;
//else if (walking) sprite_index = sPlayerWalking;
//else sprite_index = sPlayerIdle;

// Player Colliding With Things
key_right = keyboard_check(ord('D'));
key_left = -keyboard_check(ord('A'));
key_jump = keyboard_check_pressed(ord('W'));
key_down = keyboard_check(ord('S'));

move = key_left + key_right;
hsp = move * movespeed;
if (place_meeting(x,y+1,oSolid)) if (key_jump) vsp = -jumpspeed;


if keyboard_check_pressed(vk_space) {
    kick = true
}

ScGravityAndCollision();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//define movement keys
Up = keyboard_check_pressed(ord('W'))
Down = keyboard_check(ord('S'))
Left = keyboard_check(ord('A'))
Right = keyboard_check(ord('D'))

if hsp != 0 { bhsp = sign(hsp) }  

//face the right direction
if hsp != 0 { image_xscale = sign(hsp)}
if vsp != 0 { sprite_index = sPlayerAirBorne } else {
    if (Right) or (Left) { sprite_index = sPlayerWalking } else { sprite_index = sPlayerIdle}
}
//movement (left)
if (Left) and !place_meeting(x+hsp,y - 2,oSolid) {
    
    if vsp != 0 {
        if hsp &gt; -MoveSpeed { hsp -= Accel }
    } else {
        hsp = -MoveSpeed
    }
}

//movement (right)
if (Right) and !place_meeting(x+hsp,y - 2,oSolid) {
    
    if vsp != 0 {     
        if hsp &lt; MoveSpeed { hsp += Accel }  
    } else {
        hsp = MoveSpeed
    }
}

//ground drag
if place_meeting(x,y + 5,oSolid) and !(Left) and !(Right) { hsp = hsp * .7 }
    //make dust particles maybe??

//gravity
if !place_meeting(x,y+vsp,oSolid) and vsp &lt; TermVel { vsp += global.gravity }

//horisontal collision
if place_meeting(x+hsp,y - 2,oSolid) { hsp = 0 }

//vertical collision
if place_meeting(x,y + vsp,oSolid) { vsp = 0 }

//jumping

if place_meeting(x-bhsp,y + 5,oSolid) and (Up) { vsp = -JumpSpeed }

//apply speeds
x += hsp
y += vsp
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

draw_set_color(c_white)



//if (global.debug) {draw_line(x,y-25,x+(bhsp*30),y-25)}

//if (global.debug) {draw_line(x,y,x,y+25)}

if (global.debug) {draw_text(x,y -50,string(hsp))}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
